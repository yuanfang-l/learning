<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liu.dao.BlogMapper">

    <!--什么是动态SQL:动态SQL就是指根据不同的条件生成不同的SQL语句-->
    <!--所谓的动态SQL,本质还是SQL语句，只是我们可以在SQL层面， 去执行一个逻辑代码-->
    <!--动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了-->



    <insert id="addBlog" parameterType="blog">
        insert into mybatis.blog (id, title, author, create_time, views)
        values (#{id}, #{title}, #{author}, #{createTime}, #{views});
    </insert>

    <!--<sql>标签实现代码复用，减少重复代码，使用时用<include>标签获取，最好不要讲where放入，否则意义不大-->
    <sql id="if-title-author">
        <if test="title != null">
            and title = #{title}
        </if>
        <if test="author != null">
            and author = #{author}
        </if>
    </sql>

    <!--保持SQL语句正常，将多余的"and"去掉（第一个语句的and也可以去掉）-->
    <select id="queryBlogIF" parameterType="map" resultType="blog">
        select * from mybatis.blog
        <where>
           <include refid="if-title-author"/>
        </where>
    </select>

    <!--在choose标签中，若前一个when满足，则结束语句-->
    <select id="queryBlogChoose" parameterType="map" resultType="blog">

        select * from mybatis.blog
        <where>
        <choose>
            <when test="title != null">
                title = #{title}
            </when>
            <when test="author != null">
                and author = #{author}
            </when>
            <otherwise>
                and views = #{views}
            </otherwise>
        </choose>
        </where>
    </select>

    <!--<set>与<where> 用法相似，去除多余","-->
    <update id="updateBlog" parameterType="map">
        update mybatis.blog
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="author != null">
                author = #{author},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="queryBlogForeach" parameterType="map" resultType="blog">
        select * from mybatis.blog
        <where>

            <foreach collection="ids" item="id" open="and (" close=")" separator="or">
            id = #{id}
            </foreach>
        </where>
    </select>
</mapper>


